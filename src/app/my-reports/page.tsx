'use client';

import React, { useEffect, useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { createClient } from '@/lib/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useTheme } from '@/app/components/ThemeProvider';
import { useNotification } from '@/context/NotificationContext';
import { List, Spin, Typography, Button, Space, Layout, Switch, Avatar, Input, Select, DatePicker, Row, Col, Modal, App as AntApp, Form } from 'antd';
import { LogoutOutlined, UserOutlined, EditOutlined, SunOutlined, MoonOutlined, DeleteOutlined, DownOutlined, UpOutlined, PlusOutlined, CopyOutlined, BellOutlined } from '@ant-design/icons';
import RichEditor from '@/app/components/RichEditor';
import type { Dayjs } from 'dayjs';

const { Header, Content } = Layout;
const { Title, Text, Paragraph } = Typography;
const { Option } = Select;

interface DailyReport {
  id: string;
  user_id: string;
  report_date: string;
  report_type: string;
  user_name_snapshot: string;
  report_content: string;
  projects_data?: unknown;
  misc_tasks_data?: unknown;
  created_at: string;
}

interface ManualReportFormValues {
  report_date: Dayjs;
  report_type: string;
  report_content: string;
}

export default function MyReportsPage() {
  const { user, loading: authLoading, handleLogout } = useAuth();
  const { isDarkMode, setIsDarkMode } = useTheme();
  const { unreadCount } = useNotification();
  const router = useRouter();
  const [reports, setReports] = useState<DailyReport[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [supabase] = useState(() => createClient());

  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [filterDate, setFilterDate] = useState<string | null>(null);
  const [expandedReportId, setExpandedReportId] = useState<string | null>(null);

  const [isAddModalVisible, setIsAddModalVisible] = useState(false);
  const [isSubmittingManualReport, setIsSubmittingManualReport] = useState(false);
  const [manualReportForm] = Form.useForm<ManualReportFormValues>();

  // Ìé∏Ïßë Í¥ÄÎ†® ÏÉÅÌÉú
  const [editingReportId, setEditingReportId] = useState<string | null>(null);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);
  const [editingReport, setEditingReport] = useState<DailyReport | null>(null);
  const [isSavingEdit, setIsSavingEdit] = useState(false);

  // Î≥µÏÇ¨ Í¥ÄÎ†® ÏÉÅÌÉú
  const [isCopyModalVisible, setIsCopyModalVisible] = useState(false);
  const [copyingReport, setCopyingReport] = useState<DailyReport | null>(null);
  const [isSavingCopy, setIsSavingCopy] = useState(false);
  const [copyReportForm] = Form.useForm<ManualReportFormValues>();

  const { message: messageApi, modal } = AntApp.useApp();

  const fetchReports = useCallback(async () => {
    if (!user) return;
    setLoading(true);
    setError(null);
    try {
      const { data, error: dbError } = await supabase
        .from('daily_reports')
        .select<'*', DailyReport>('*')
        .eq('user_id', user.id)
        .order('report_date', { ascending: false });
      if (dbError) throw dbError;
      setReports(data || []);
    } catch (err: unknown) {
      let errorMessage = 'Î≥¥Í≥†ÏÑúÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      if (err instanceof Error) {
        errorMessage = err.message;
      } else if (typeof err === 'string') {
        errorMessage = err;
      } else if (typeof err === 'object' && err !== null && 'message' in err && typeof (err as { message: string }).message === 'string') {
        errorMessage = (err as { message: string }).message;
      }
      console.error('Î≥¥Í≥†ÏÑú Î°úÎî© Ïò§Î•ò:', err);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, [user, supabase]);

  useEffect(() => {
    if (!authLoading && !user) {
      router.push('/login');
    }
  }, [user, authLoading, router]);

  useEffect(() => {
    if (user) {
      fetchReports();
    }
  }, [user, fetchReports]);

  const filteredReports = reports.filter(report => {
    const searchTermMatch = report.report_content.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          report.report_date.includes(searchTerm);
    
    const typeMatch = filterType === 'all' || report.report_type === filterType;
    
    const dateMatch = !filterDate || report.report_date === filterDate;

    return searchTermMatch && typeMatch && dateMatch;
  });

  const handleDeleteReport = async (reportId: string) => {
    if (!user) return;
    try {
      const { error: deleteError } = await supabase
        .from('daily_reports')
        .delete()
        .eq('id', reportId)
        .eq('user_id', user.id);

      if (deleteError) throw deleteError;

      setReports(prevReports => prevReports.filter(report => report.id !== reportId));
      messageApi.success('Î≥¥Í≥†ÏÑúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
    } catch (err: unknown) {
      let errorMessage = 'Î≥¥Í≥†ÏÑú ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      if (err instanceof Error) {
        errorMessage = err.message;
      } else if (typeof err === 'string') {
        errorMessage = err;
      } else if (typeof err === 'object' && err !== null && 'message' in err && typeof (err as { message: string }).message === 'string') {
        errorMessage = (err as { message: string }).message;
      }
      console.error('Î≥¥Í≥†ÏÑú ÏÇ≠Ï†ú Ïò§Î•ò:', err);
      messageApi.error(errorMessage);
    }
  };

  const showDeleteConfirm = (reportId: string, reportDate: string) => {
    modal.confirm({
      title: `'${reportDate}' Î≥¥Í≥†ÏÑúÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`,
      content: 'ÏÇ≠Ï†úÎêú Î≥¥Í≥†ÏÑúÎäî Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§.',
      okText: 'ÏÇ≠Ï†ú',
      okType: 'danger',
      cancelText: 'Ï∑®ÏÜå',
      onOk() {
        handleDeleteReport(reportId);
      },
      onCancel() {
        // console.log('ÏÇ≠Ï†ú Ï∑®ÏÜå');
      },
    });
  };

  const MAX_LINES = 3;
  const LINE_HEIGHT = 1.5;
  const MAX_HEIGHT_THRESHOLD = `${MAX_LINES * LINE_HEIGHT}em`;

  // ReportItem Ïª¥Ìè¨ÎÑåÌä∏
  const ReportItem = ({ 
    item, 
    isDarkMode, 
    expandedReportId, 
    setExpandedReportId, 
    showDeleteConfirm, 
    handleEditReport,
    handleCopyReport,
    MAX_HEIGHT_THRESHOLD, 
    LINE_HEIGHT 
  }: {
    item: DailyReport;
    isDarkMode: boolean;
    expandedReportId: string | null;
    setExpandedReportId: (id: string | null) => void;
    showDeleteConfirm: (id: string, date: string) => void;
    handleEditReport: (report: DailyReport) => void;
    handleCopyReport: (report: DailyReport) => void;
    MAX_HEIGHT_THRESHOLD: string;
    LINE_HEIGHT: number;
  }) => {
    const contentRef = React.useRef<HTMLDivElement>(null);
    const [isOverflowing, setIsOverflowing] = useState(false);

    useEffect(() => {
      if (contentRef.current) {
        const el = contentRef.current;
        if (el.scrollHeight > el.clientHeight || el.scrollWidth > el.clientWidth) {
          setIsOverflowing(true);
        } else {
          setIsOverflowing(false);
        }
      }
    }, [item.report_content]);

    return (
      <List.Item
        key={item.id}
        actions={[
          <Button
            key="edit"
            type="text"
            icon={<EditOutlined />}
            onClick={() => handleEditReport(item)}
            title="Î≥¥Í≥†ÏÑú Ìé∏Ïßë"
          />,
          <Button
            key="copy"
            type="text"
            icon={<CopyOutlined />}
            onClick={() => handleCopyReport(item)}
            title="Î≥¥Í≥†ÏÑú Î≥µÏÇ¨"
          />,
          <Button
            key="delete"
            type="text"
            danger
            icon={<DeleteOutlined />}
            onClick={() => showDeleteConfirm(item.id, item.report_date)}
            title="Î≥¥Í≥†ÏÑú ÏÇ≠Ï†ú"
          />,
        ]}
        style={{
          background: isDarkMode ? '#1d1d1d' : '#fafafa',
          padding: '16px',
          borderRadius: '8px',
          marginBottom: '16px'
        }}
      >
        <List.Item.Meta
          title={<Text style={{color: isDarkMode ? 'white' : 'black'}}>{`${item.report_date} - ${item.report_type === 'morning' ? '‚òÄÔ∏è Ï∂úÍ∑º' : 'üåô Ìá¥Í∑º'} Î≥¥Í≥†ÏÑú`}</Text>}
          description={<Text type="secondary">{`ÏûëÏÑ±Ïûê: ${item.user_name_snapshot}`}</Text>}
        />

        <Paragraph
          ref={contentRef}
          style={{
            maxHeight: expandedReportId === item.id ? 'none' : MAX_HEIGHT_THRESHOLD,
            overflow: 'hidden',
            lineHeight: LINE_HEIGHT,
            position: 'relative',
            color: isDarkMode ? 'rgba(255,255,255,0.85)' : 'rgba(0,0,0,0.85)',
            whiteSpace: 'pre-wrap'
          }}
        >
          {item.report_content}
        </Paragraph>
        {isOverflowing && (
          <Button
            type="link"
            icon={expandedReportId === item.id ? <UpOutlined /> : <DownOutlined />}
            onClick={() => setExpandedReportId(expandedReportId === item.id ? null : item.id)}
            style={{ padding: 0, height: 'auto' }}
          >
            {expandedReportId === item.id ? 'Ï†ëÍ∏∞' : 'ÎçîÎ≥¥Í∏∞'}
          </Button>
        )}
      </List.Item>
    );
  };

  if (authLoading || (loading && !reports.length && !error)) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 'calc(100vh - 200px)', textAlign: 'center' }}>
        <Spin size="large">
          <div style={{ padding: '50px', border: '1px solid transparent' }} />
        </Spin>
      </div>
    );
  }

  const PageHeader = () => (
    <Header
      style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        position: 'sticky',
        top: 0,
        zIndex: 1,
        width: '100%',
        backgroundColor: isDarkMode ? '#001529' : '#fff',
        borderBottom: `1px solid ${isDarkMode ? '#303030' : '#f0f0f0'}`,
        padding: '0 24px',
        transition: 'background-color 0.3s, border-color 0.3s',
      }}
    >
      <Link href="/" passHref>
        <Title level={3} style={{ margin: 0, color: isDarkMode ? '#fff' : '#000' }}>
          FunCommute
        </Title>
      </Link>
      <Space align="center" size="middle">
        <Switch
          checkedChildren={<MoonOutlined />}
          unCheckedChildren={<SunOutlined />}
          checked={isDarkMode}
          onChange={setIsDarkMode}
        />
        {user ? (
          <>
            <Link href="/ai-pm" passHref>
              <Button icon={<EditOutlined />}>ü§ñ AI PM</Button>
            </Link>
            <Link href="/" passHref>
              <Button icon={<EditOutlined />}>ÏÉà Î≥¥Í≥†ÏÑú ÏûëÏÑ±</Button>
            </Link>
            <Link href="/notifications">
              <Button 
                type="text" 
                style={{ color: isDarkMode ? 'rgba(255,255,255,0.85)' : '#000', position: 'relative' }}
                icon={<BellOutlined />}
              >
                ÏïåÎ¶º
                {unreadCount > 0 && (
                  <span
                    style={{
                      position: 'absolute',
                      top: -2,
                      right: -2,
                      backgroundColor: '#ff4d4f',
                      color: 'white',
                      borderRadius: '50%',
                      width: 16,
                      height: 16,
                      fontSize: 10,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      lineHeight: 1,
                    }}
                  >
                    {unreadCount > 9 ? '9+' : unreadCount}
                  </span>
                )}
              </Button>
            </Link>
            <Avatar icon={<UserOutlined />} style={{ marginRight: 8 }} />
            <Text style={{ color: isDarkMode ? 'rgba(255,255,255,0.85)' : '#000' }}>
              {user.user_metadata?.full_name || user.email?.split('@')[0]}
            </Text>
            <Button icon={<LogoutOutlined />} onClick={handleLogout} ghost={!isDarkMode}>
              Î°úÍ∑∏ÏïÑÏõÉ
            </Button>
          </>
        ) : (
          <Space>
            <Link href="/login" passHref><Button>Î°úÍ∑∏Ïù∏</Button></Link>
            <Link href="/signup" passHref><Button type="primary">ÌöåÏõêÍ∞ÄÏûÖ</Button></Link>
          </Space>
        )}
      </Space>
    </Header>
  );

  const handleEditReport = (report: DailyReport) => {
    setEditingReport(report);
    setEditingReportId(report.id);
    setIsEditModalVisible(true);
  };

  const handleSaveEditedReport = async (editedContent: string) => {
    if (!editingReport || !user) {
      messageApi.error('Ìé∏ÏßëÌï† Î≥¥Í≥†ÏÑú Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
      return;
    }

    setIsSavingEdit(true);
    try {
      const { error: updateError } = await supabase
        .from('daily_reports')
        .update({
          report_content: editedContent,
        })
        .eq('id', editingReport.id)
        .eq('user_id', user.id);

      if (updateError) throw updateError;

      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setReports(prevReports =>
        prevReports.map(report =>
          report.id === editingReport.id
            ? { ...report, report_content: editedContent }
            : report
        )
      );

      messageApi.success('Î≥¥Í≥†ÏÑúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.');
      setIsEditModalVisible(false);
      setEditingReport(null);
      setEditingReportId(null);
    } catch (err: unknown) {
      let errorMessage = 'Î≥¥Í≥†ÏÑú ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      if (err instanceof Error) {
        errorMessage = err.message;
      } else if (typeof err === 'string') {
        errorMessage = err;
      } else if (typeof err === 'object' && err !== null && 'message' in err && typeof (err as { message: string }).message === 'string') {
        errorMessage = (err as { message: string }).message;
      }
      console.error('Î≥¥Í≥†ÏÑú ÏàòÏ†ï Ïò§Î•ò:', err);
      messageApi.error(errorMessage);
    } finally {
      setIsSavingEdit(false);
    }
  };

  const handleCopyReport = (report: DailyReport) => {
    setCopyingReport(report);
    setIsCopyModalVisible(true);
    // ÌèºÏóê Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï (Ïò§Îäò ÎÇ†Ïßú, Í∞ôÏùÄ ÌÉÄÏûÖ, Í∞ôÏùÄ ÎÇ¥Ïö©)
    copyReportForm.setFieldsValue({
      report_date: undefined, // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë ÏÑ†ÌÉùÌïòÎèÑÎ°ù
      report_type: report.report_type,
      report_content: report.report_content,
    });
  };

  const handleSaveCopiedReport = async (values: ManualReportFormValues) => {
    if (!user || !copyingReport) {
      messageApi.error('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌïòÍ±∞ÎÇò Î≥µÏÇ¨Ìï† Î≥¥Í≥†ÏÑú Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
      return;
    }
    setIsSavingCopy(true);
    try {
      const reportDate = values.report_date.format('YYYY-MM-DD');
      const newReport = {
        user_id: user.id,
        report_date: reportDate,
        report_type: values.report_type,
        user_name_snapshot: user.user_metadata?.full_name || user.email?.split('@')[0] || 'ÏùµÎ™Ö',
        report_content: values.report_content,
        projects_data: copyingReport.projects_data,
        misc_tasks_data: copyingReport.misc_tasks_data,
      };

      const { error: insertError } = await supabase.from('daily_reports').insert([newReport]);
      if (insertError) throw insertError;

      messageApi.success('Î≥¥Í≥†ÏÑúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.');
      setIsCopyModalVisible(false);
      setCopyingReport(null);
      copyReportForm.resetFields();
      await fetchReports();
    } catch (err: unknown) {
      let errorMessage = 'Î≥¥Í≥†ÏÑú Î≥µÏÇ¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      if (err instanceof Error) {
        errorMessage = err.message;
      } else if (typeof err === 'string') {
        errorMessage = err;
      } else if (typeof err === 'object' && err !== null && 'message' in err && typeof (err as { message: string }).message === 'string') {
        errorMessage = (err as { message: string }).message;
      }
      console.error('Î≥¥Í≥†ÏÑú Î≥µÏÇ¨ Ïò§Î•ò:', err);
      messageApi.error(errorMessage);
    } finally {
      setIsSavingCopy(false);
    }
  };

  const handleManualAddReport = async (values: ManualReportFormValues) => {
    if (!user) {
      messageApi.error('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }
    setIsSubmittingManualReport(true);
    try {
      const reportDate = values.report_date.format('YYYY-MM-DD');
      const newReport = {
        user_id: user.id,
        report_date: reportDate,
        report_type: values.report_type,
        user_name_snapshot: user.user_metadata?.full_name || user.email?.split('@')[0] || 'ÏùµÎ™Ö',
        report_content: values.report_content,
        projects_data: null,
        misc_tasks_data: null,
      };

      const { error: insertError } = await supabase.from('daily_reports').insert([newReport]);
      if (insertError) throw insertError;

      messageApi.success('Í≥ºÍ±∞ Î≥¥Í≥†ÏÑúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.');
      setIsAddModalVisible(false);
      manualReportForm.resetFields();
      await fetchReports();
    } catch (err: unknown) {
      let errorMessage = 'Í≥ºÍ±∞ Î≥¥Í≥†ÏÑú Ï∂îÍ∞Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      if (err instanceof Error) {
        errorMessage = err.message;
      } else if (typeof err === 'string') {
        errorMessage = err;
      } else if (typeof err === 'object' && err !== null && 'message' in err && typeof (err as { message: string }).message === 'string') {
        errorMessage = (err as { message: string }).message;
      }
      console.error('Í≥ºÍ±∞ Î≥¥Í≥†ÏÑú Ï∂îÍ∞Ä Ïò§Î•ò:', err);
      messageApi.error(errorMessage);
    } finally {
      setIsSubmittingManualReport(false);
    }
  };

  return (
    <Layout style={{ minHeight: '100vh', backgroundColor: isDarkMode ? '#001529' : '#f0f2f5' }}>
      <PageHeader />
      <Content style={{ padding: '24px 48px', transition: 'background-color 0.3s' }}>
        <div 
          style={{
            background: isDarkMode ? '#141414' : '#fff',
            padding: 24,
            borderRadius: 8,
            transition: 'background-color 0.3s'
          }}
        >
          <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Title level={2} style={{color: isDarkMode ? 'white' : 'black'}}>ÎÇ¥ Î≥¥Í≥†ÏÑú Î™©Î°ù</Title>
            <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
              <Col xs={24} sm={12} md={8}>
                <Input
                  placeholder="ÎÇ¥Ïö© ÎòêÎäî ÎÇ†ÏßúÏúºÎ°ú Í≤ÄÏÉâ"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  allowClear
                />
              </Col>
              <Col xs={24} sm={12} md={6}>
                <Select
                  value={filterType}
                  onChange={setFilterType}
                  style={{ width: '100%' }}
                >
                  <Option value="all">Î™®Îì† Ï¢ÖÎ•ò</Option>
                  <Option value="morning">Ï∂úÍ∑º Î≥¥Í≥†ÏÑú</Option>
                  <Option value="evening">Ìá¥Í∑º Î≥¥Í≥†ÏÑú</Option>
                </Select>
              </Col>
              <Col xs={24} sm={12} md={6}>
                <DatePicker
                  onChange={(_date, dateString) => setFilterDate(typeof dateString === 'string' ? dateString : null)}
                  style={{ width: '100%' }}
                  placeholder="ÎÇ†Ïßú ÏÑ†ÌÉù"
                />
              </Col>
              <Col xs={24} sm={12} md={4}>
                <Button
                  type="primary"
                  icon={<PlusOutlined />}
                  onClick={() => setIsAddModalVisible(true)}
                  style={{ width: '100%' }}
                >
                  ÏàòÎèô Ï∂îÍ∞Ä
                </Button>
              </Col>
            </Row>

            {loading ? (
               <div style={{ textAlign: 'center', padding: '50px 0' }}>
                 <Spin size="large" />
               </div>
            ) : error ? (
              <div style={{ textAlign: 'center', color: 'red' }}>{error}</div>
            ) : (
              <List
                itemLayout="vertical"
                size="large"
                dataSource={filteredReports}
                renderItem={item => (
                  <ReportItem 
                    key={item.id}
                    item={item}
                    isDarkMode={isDarkMode}
                    expandedReportId={expandedReportId}
                    setExpandedReportId={setExpandedReportId}
                    showDeleteConfirm={showDeleteConfirm}
                    handleEditReport={handleEditReport}
                    handleCopyReport={handleCopyReport}
                    MAX_HEIGHT_THRESHOLD={MAX_HEIGHT_THRESHOLD}
                    LINE_HEIGHT={LINE_HEIGHT}
                  />
                )}
              />
            )}
          </Space>
        </div>
      </Content>
      <Modal
        title="Í≥ºÍ±∞ Î≥¥Í≥†ÏÑú ÏàòÎèô Ï∂îÍ∞Ä"
        open={isAddModalVisible}
        onCancel={() => setIsAddModalVisible(false)}
        footer={null}
        destroyOnHidden
      >
        <Form
          form={manualReportForm}
          layout="vertical"
          onFinish={handleManualAddReport}
          initialValues={{ report_type: 'morning' }}
        >
          <Form.Item
            name="report_date"
            label="Î≥¥Í≥† ÎÇ†Ïßú"
            rules={[{ required: true, message: 'ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.' }]}
          >
            <DatePicker style={{ width: '100%' }} />
          </Form.Item>
          <Form.Item
            name="report_type"
            label="Î≥¥Í≥† Ï¢ÖÎ•ò"
            rules={[{ required: true, message: 'Î≥¥Í≥† Ï¢ÖÎ•òÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.' }]}
          >
            <Select>
              <Option value="morning">Ï∂úÍ∑º Î≥¥Í≥†ÏÑú</Option>
              <Option value="evening">Ìá¥Í∑º Î≥¥Í≥†ÏÑú</Option>
            </Select>
          </Form.Item>
          <Form.Item
            name="report_content"
            label="Î≥¥Í≥† ÎÇ¥Ïö©"
            rules={[{ required: true, message: 'ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' }]}
          >
            <Input.TextArea rows={10} />
          </Form.Item>
          <Form.Item style={{ textAlign: 'right', marginBottom: 0 }}>
            <Button onClick={() => setIsAddModalVisible(false)} style={{ marginRight: 8 }}>
              Ï∑®ÏÜå
            </Button>
            <Button type="primary" htmlType="submit" loading={isSubmittingManualReport}>
              {isSubmittingManualReport ? 'Ï†ÄÏû• Ï§ë...' : 'Ï†ÄÏû•'}
            </Button>
          </Form.Item>
        </Form>
      </Modal>

      {/* Î≥¥Í≥†ÏÑú Ìé∏Ïßë Î™®Îã¨ */}
      <Modal
        title={`Î≥¥Í≥†ÏÑú Ìé∏Ïßë - ${editingReport?.report_date} (${editingReport?.report_type === 'morning' ? 'Ï∂úÍ∑º' : 'Ìá¥Í∑º'})`}
        open={isEditModalVisible}
        onCancel={() => {
          setIsEditModalVisible(false);
          setEditingReport(null);
          setEditingReportId(null);
        }}
        footer={null}
        width="90%"
        style={{ maxWidth: '1200px' }}
        destroyOnClose
      >
        {editingReport && (
          <div style={{ minHeight: '500px' }}>
            <RichEditor
              initialContent={editingReport.report_content}
              onSave={handleSaveEditedReport}
              isSaving={isSavingEdit}
              saveActionDisabled={false}
              title={`${editingReport.report_date} - ${editingReport.report_type === 'morning' ? '‚òÄÔ∏è Ï∂úÍ∑º' : 'üåô Ìá¥Í∑º'} Î≥¥Í≥†ÏÑú Ìé∏Ïßë`}
            />
          </div>
        )}
      </Modal>

      {/* Î≥¥Í≥†ÏÑú Î≥µÏÇ¨ Î™®Îã¨ */}
      <Modal
        title={`Î≥¥Í≥†ÏÑú Î≥µÏÇ¨ - ${copyingReport?.report_date} (${copyingReport?.report_type === 'morning' ? 'Ï∂úÍ∑º' : 'Ìá¥Í∑º'})`}
        open={isCopyModalVisible}
        onCancel={() => {
          setIsCopyModalVisible(false);
          setCopyingReport(null);
          copyReportForm.resetFields();
        }}
        footer={null}
        destroyOnClose
      >
        <Form
          form={copyReportForm}
          layout="vertical"
          onFinish={handleSaveCopiedReport}
        >
          <Form.Item
            name="report_date"
            label="ÏÉà Î≥¥Í≥†ÏÑú ÎÇ†Ïßú"
            rules={[{ required: true, message: 'ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.' }]}
          >
            <DatePicker style={{ width: '100%' }} placeholder="Î≥µÏÇ¨Ìï† ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî" />
          </Form.Item>
          <Form.Item
            name="report_type"
            label="Î≥¥Í≥† Ï¢ÖÎ•ò"
            rules={[{ required: true, message: 'Î≥¥Í≥† Ï¢ÖÎ•òÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.' }]}
          >
            <Select>
              <Option value="morning">Ï∂úÍ∑º Î≥¥Í≥†ÏÑú</Option>
              <Option value="evening">Ìá¥Í∑º Î≥¥Í≥†ÏÑú</Option>
            </Select>
          </Form.Item>
          <Form.Item
            name="report_content"
            label="Î≥¥Í≥† ÎÇ¥Ïö©"
            rules={[{ required: true, message: 'ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' }]}
          >
            <Input.TextArea rows={12} placeholder="Î≥µÏÇ¨Îêú ÎÇ¥Ïö©ÏùÑ ÏàòÏ†ïÌï† Ïàò ÏûàÏäµÎãàÎã§" />
          </Form.Item>
          <Form.Item style={{ textAlign: 'right', marginBottom: 0 }}>
            <Button 
              onClick={() => {
                setIsCopyModalVisible(false);
                setCopyingReport(null);
                copyReportForm.resetFields();
              }} 
              style={{ marginRight: 8 }}
            >
              Ï∑®ÏÜå
            </Button>
            <Button type="primary" htmlType="submit" loading={isSavingCopy}>
              {isSavingCopy ? 'Î≥µÏÇ¨ Ï§ë...' : 'Î≥µÏÇ¨ÌïòÏó¨ Ï†ÄÏû•'}
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </Layout>
  );
} 