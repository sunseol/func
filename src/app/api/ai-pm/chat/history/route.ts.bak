import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { 
  AIpmErrorType,
  WorkflowStep,
  WORKFLOW_STEPS
} from '@/types/ai-pm';

interface ConversationSummary {
  id: string;
  workflow_step: WorkflowStep;
  step_name: string;
  message_count: number;
  user_message_count: number;
  assistant_message_count: number;
  last_activity: string;
  created_at: string;
  updated_at: string;
}

interface ConversationStats {
  total_conversations: number;
  total_messages: number;
  most_active_step: WorkflowStep | null;
  activity_by_step: Record<WorkflowStep, number>;
  recent_activity_count: number;
}

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient();
    
    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json(
        { error: AIpmErrorType.UNAUTHORIZED, message: '인증이 필요합니다.' },
        { status: 401 }
      );
    }

    // Get parameters from URL
    const url = new URL(request.url);
    const projectId = url.searchParams.get('projectId');

    if (!projectId) {
      return NextResponse.json(
        { error: AIpmErrorType.INVALID_PROJECT_ID, message: '프로젝트 ID가 필요합니다.' },
        { status: 400 }
      );
    }

    // Get all conversations for this project
    const { data: conversations, error: conversationsError } = await supabase
      .from('ai_conversations')
      .select('*')
      .eq('project_id', projectId)
      .order('updated_at', { ascending: false });

    if (conversationsError) {
      throw conversationsError;
    }

    // Process conversations to create summaries
    const conversationSummaries: ConversationSummary[] = [];
    const activityByStep: Record<WorkflowStep, number> = {} as Record<WorkflowStep, number>;
    let totalMessages = 0;
    let recentActivityCount = 0;
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);

    for (const conversation of conversations || []) {
      const messages = Array.isArray(conversation.messages) ? conversation.messages : [];
      const userMessages = messages.filter((m: any) => m.role === 'user');
      const assistantMessages = messages.filter((m: any) => m.role === 'assistant');
      
      const summary: ConversationSummary = {
        id: conversation.id,
        workflow_step: conversation.workflow_step,
        step_name: WORKFLOW_STEPS[conversation.workflow_step as WorkflowStep],
        message_count: messages.length,
        user_message_count: userMessages.length,
        assistant_message_count: assistantMessages.length,
        last_activity: conversation.updated_at,
        created_at: conversation.created_at,
        updated_at: conversation.updated_at
      };

      conversationSummaries.push(summary);

      // Update statistics
      const step = conversation.workflow_step as WorkflowStep;
      activityByStep[step] = (activityByStep[step] || 0) + messages.length;
      totalMessages += messages.length;

      // Count recent activity (last 24 hours)
      if (new Date(conversation.updated_at) > oneDayAgo) {
        recentActivityCount++;
      }
    }

    // Find most active step
    let mostActiveStep: WorkflowStep | null = null;
    let maxActivity = 0;
    for (const [step, count] of Object.entries(activityByStep)) {
      if (count > maxActivity) {
        maxActivity = count;
        mostActiveStep = parseInt(step) as WorkflowStep;
      }
    }

    const stats: ConversationStats = {
      total_conversations: conversationSummaries.length,
      total_messages: totalMessages,
      most_active_step: mostActiveStep,
      activity_by_step: activityByStep,
      recent_activity_count: recentActivityCount
    };

    return NextResponse.json({
      conversations: conversationSummaries,
      stats
    });

  } catch (error) {
    console.error('Conversation History API Error:', error);
    
    return NextResponse.json(
      { 
        error: AIpmErrorType.INTERNAL_ERROR, 
        message: '서버 오류가 발생했습니다.',
        details: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
      },
      { status: 500 }
    );
  }
}
