import { cookies } from 'next/headers';
import { createClient } from '@/lib/supabase/server';
import { getConversationManager } from '@/lib/ai-pm/conversation-manager';
import { 
  AIpmErrorType,
  WorkflowStep,
  isValidWorkflowStep,
  WORKFLOW_STEPS
} from '@/types/ai-pm';
import { format } from 'date-fns';
import { ko } from 'date-fns/locale';

export async function GET(request: NextRequest) {
  try {
    const cookieStore = cookies();
    const supabase = await createClient();
    
    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json(
        { error: AIpmErrorType.UNAUTHORIZED, message: '인증이 필요합니다.' },
        { status: 401 }
      );
    }

    // Get parameters from URL
    const url = new URL(request.url);
    const projectId = url.searchParams.get('projectId');
    const workflowStepParam = url.searchParams.get('workflowStep');
    const exportFormat = url.searchParams.get('format') || 'markdown';

    if (!projectId) {
      return NextResponse.json(
        { error: AIpmErrorType.INVALID_PROJECT_ID, message: '프로젝트 ID가 필요합니다.' },
        { status: 400 }
      );
    }

    if (!workflowStepParam) {
      return NextResponse.json(
        { error: AIpmErrorType.INVALID_WORKFLOW_STEP, message: '워크플로우 단계가 필요합니다.' },
        { status: 400 }
      );
    }

    const workflowStep = parseInt(workflowStepParam);
    if (!isValidWorkflowStep(workflowStep)) {
      return NextResponse.json(
        { error: AIpmErrorType.INVALID_WORKFLOW_STEP, message: '유효하지 않은 워크플로우 단계입니다.' },
        { status: 400 }
      );
    }

    if (!['markdown', 'pdf'].includes(exportFormat)) {
      return NextResponse.json(
        { error: AIpmErrorType.VALIDATION_ERROR, message: '지원하지 않는 내보내기 형식입니다.' },
        { status: 400 }
      );
    }

    // Check project access
    const { data: projectMember, error: memberError } = await supabase
      .from('project_members')
      .select('id')
      .eq('project_id', projectId)
      .eq('user_id', user.id)
      .single();

    if (memberError || !projectMember) {
      // Check if user is admin
      const { data: userProfile } = await supabase
        .from('user_profiles')
        .select('role')
        .eq('id', user.id)
        .single();

      if (!userProfile || userProfile.role !== 'admin') {
        return NextResponse.json(
          { error: AIpmErrorType.FORBIDDEN, message: '프로젝트에 접근할 권한이 없습니다.' },
          { status: 403 }
        );
      }
    }

    // Get project information
    const { data: project } = await supabase
      .from('projects')
      .select('name, description')
      .eq('id', projectId)
      .single();

    // Get conversation
    const conversationManager = getConversationManager(supabase);
    const conversation = await conversationManager.loadConversation(projectId, workflowStep, user.id);

    if (!conversation || conversation.messages.length === 0) {
      return NextResponse.json(
        { error: AIpmErrorType.DOCUMENT_NOT_FOUND, message: '내보낼 대화 기록이 없습니다.' },
        { status: 404 }
      );
    }

    if (exportFormat === 'markdown') {
      // Generate markdown content
      let markdown = `# AI 대화 기록\n\n`;
      markdown += `**프로젝트:** ${project?.name || '알 수 없음'}\n`;
      markdown += `**단계:** ${workflowStep}단계 - ${WORKFLOW_STEPS[workflowStep]}\n`;
      markdown += `**생성일:** ${format(new Date(), 'yyyy년 MM월 dd일 HH:mm', { locale: ko })}\n`;
      markdown += `**총 메시지:** ${conversation.messages.length}개\n\n`;
      markdown += '---\n\n';

      conversation.messages.forEach((message, index) => {
        const role = message.role === 'user' ? '👤 사용자' : '🤖 AI 어시스턴트';
        const timestamp = format(message.timestamp, 'yyyy-MM-dd HH:mm:ss', { locale: ko });
        
        markdown += `## ${index + 1}. ${role}\n`;
        markdown += `*${timestamp}*\n\n`;
        markdown += `${message.content}\n\n`;
        markdown += '---\n\n';
      });

      return new NextResponse(markdown, {
        headers: {
          'Content-Type': 'text/markdown; charset=utf-8',
          'Content-Disposition': `attachment; filename="conversation-step-${workflowStep}-${format(new Date(), 'yyyy-MM-dd')}.md"`
        }
      });
    } else if (exportFormat === 'pdf') {
      // For PDF export, we'll generate HTML and convert it
      // This is a simplified version - in production, you might want to use a proper PDF library
      let html = `
        <!DOCTYPE html>
        <html lang="ko">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>AI 대화 기록</title>
          <style>
            body {
              font-family: 'Malgun Gothic', sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 800px;
              margin: 0 auto;
              padding: 20px;
            }
            .header {
              border-bottom: 2px solid #007bff;
              padding-bottom: 20px;
              margin-bottom: 30px;
            }
            .header h1 {
              color: #007bff;
              margin: 0;
            }
            .meta {
              background: #f8f9fa;
              padding: 15px;
              border-radius: 5px;
              margin-bottom: 20px;
            }
            .message {
              margin-bottom: 30px;
              padding: 15px;
              border-radius: 8px;
              border-left: 4px solid #007bff;
            }
            .message.user {
              background: #e3f2fd;
              border-left-color: #2196f3;
            }
            .message.assistant {
              background: #f5f5f5;
              border-left-color: #4caf50;
            }
            .message-header {
              font-weight: bold;
              margin-bottom: 10px;
              display: flex;
              justify-content: space-between;
              align-items: center;
            }
            .message-content {
              white-space: pre-wrap;
              word-wrap: break-word;
            }
            .timestamp {
              font-size: 0.9em;
              color: #666;
            }
            @media print {
              body { margin: 0; }
              .message { break-inside: avoid; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>AI 대화 기록</h1>
          </div>
          <div class="meta">
            <p><strong>프로젝트:</strong> ${project?.name || '알 수 없음'}</p>
            <p><strong>단계:</strong> ${workflowStep}단계 - ${WORKFLOW_STEPS[workflowStep]}</p>
            <p><strong>생성일:</strong> ${format(new Date(), 'yyyy년 MM월 dd일 HH:mm', { locale: ko })}</p>
            <p><strong>총 메시지:</strong> ${conversation.messages.length}개</p>
          </div>
      `;

      conversation.messages.forEach((message, index) => {
        const role = message.role === 'user' ? '👤 사용자' : '🤖 AI 어시스턴트';
        const timestamp = format(message.timestamp, 'yyyy-MM-dd HH:mm:ss', { locale: ko });
        const messageClass = message.role === 'user' ? 'user' : 'assistant';
        
        html += `
          <div class="message ${messageClass}">
            <div class="message-header">
              <span>${role}</span>
              <span class="timestamp">${timestamp}</span>
            </div>
            <div class="message-content">${message.content.replace(/\n/g, '<br>')}</div>
          </div>
        `;
      });

      html += `
        </body>
        </html>
      `;

      // For now, return HTML that can be printed as PDF
      // In production, you might want to use puppeteer or similar to generate actual PDF
      return new NextResponse(html, {
        headers: {
          'Content-Type': 'text/html; charset=utf-8',
          'Content-Disposition': `attachment; filename="conversation-step-${workflowStep}-${format(new Date(), 'yyyy-MM-dd')}.html"`
        }
      });
    }

    return NextResponse.json(
      { error: AIpmErrorType.VALIDATION_ERROR, message: '지원하지 않는 내보내기 형식입니다.' },
      { status: 400 }
    );

  } catch (error) {
    console.error('Export Conversation API Error:', error);
    
    return NextResponse.json(
      { 
        error: AIpmErrorType.INTERNAL_ERROR, 
        message: '서버 오류가 발생했습니다.',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      },
      { status: 500 }
    );
  }
}