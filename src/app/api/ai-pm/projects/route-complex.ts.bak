import { NextRequest, NextResponse } from 'next/server';
import { 
  createSupabaseClient, 
  checkAuth, 
  ValidationErrors,
  DatabaseErrors,
  checkRateLimit,
  getSecurityHeaders,
  sanitizeInput,
  validateProjectData
} from '@/lib/ai-pm/auth-middleware';
import { 
  CreateProjectRequest, 
  ProjectsResponse,
  AIpmErrorType 
} from '@/types/ai-pm';
import { canCreateProject } from '@/lib/ai-pm/permissions';

// GET /api/ai-pm/projects - Get all projects for the current user
export async function GET(request: NextRequest) {
  try {
    const supabase = createSupabaseClient();
    const authResult = await checkAuth(supabase);
    
    if ('error' in authResult) {
      const status = authResult.error === AIpmErrorType.UNAUTHORIZED ? 401 : 403;
      return NextResponse.json(authResult, { 
        status,
        headers: getSecurityHeaders()
      });
    }

    const { user, profile } = authResult;

    // Rate limiting check
    const clientIP = request.headers.get('x-forwarded-for') || 'unknown';
    const rateLimit = checkRateLimit(`projects-get-${user.id}-${clientIP}`, 60, 60000);
    
    if (!rateLimit.allowed) {
      return NextResponse.json(
        DatabaseErrors.RATE_LIMITED,
        { 
          status: 429,
          headers: {
            ...getSecurityHeaders(),
            'X-RateLimit-Remaining': '0',
            'X-RateLimit-Reset': new Date(rateLimit.resetTime).toISOString(),
          }
        }
      );
    }

    let query;
    
    if (profile.role === 'admin') {
      // Admin can see all projects
      query = supabase
        .from('projects_with_creator')
        .select('*')
        .order('created_at', { ascending: false });
    } else {
      // Regular users can only see projects they're members of
      query = supabase
        .rpc('get_user_projects', { user_uuid: user.id });
    }

    const { data: projects, error } = await query;

    if (error) {
      console.error('Database error:', error);
      return NextResponse.json(
        DatabaseErrors.QUERY_ERROR('프로젝트 조회'),
        { 
          status: 500,
          headers: getSecurityHeaders()
        }
      );
    }

    return NextResponse.json(
      { projects } as ProjectsResponse,
      {
        headers: {
          ...getSecurityHeaders(),
          'X-RateLimit-Remaining': rateLimit.remaining.toString(),
          'X-RateLimit-Reset': new Date(rateLimit.resetTime).toISOString(),
        }
      }
    );
  } catch (error) {
    console.error('Unexpected error:', error);
    return NextResponse.json(
      { error: AIpmErrorType.INTERNAL_ERROR, message: '서버 내부 오류가 발생했습니다.' },
      { 
        status: 500,
        headers: getSecurityHeaders()
      }
    );
  }
}

// POST /api/ai-pm/projects - Create a new project (admin only)
export async function POST(request: NextRequest) {
  try {
    const supabase = createSupabaseClient();
    const authResult = await checkAuth(supabase);
    
    if ('error' in authResult) {
      const status = authResult.error === AIpmErrorType.UNAUTHORIZED ? 401 : 403;
      return NextResponse.json(authResult, { 
        status,
        headers: getSecurityHeaders()
      });
    }

    const { user, profile } = authResult;

    // Check permission to create projects
    if (!canCreateProject(profile.role)) {
      return NextResponse.json(
        { error: AIpmErrorType.FORBIDDEN, message: '프로젝트 생성 권한이 없습니다.' },
        { 
          status: 403,
          headers: getSecurityHeaders()
        }
      );
    }

    // Rate limiting check
    const clientIP = request.headers.get('x-forwarded-for') || 'unknown';
    const rateLimit = checkRateLimit(`projects-create-${user.id}-${clientIP}`, 10, 60000);
    
    if (!rateLimit.allowed) {
      return NextResponse.json(
        DatabaseErrors.RATE_LIMITED,
        { 
          status: 429,
          headers: {
            ...getSecurityHeaders(),
            'X-RateLimit-Remaining': '0',
            'X-RateLimit-Reset': new Date(rateLimit.resetTime).toISOString(),
          }
        }
      );
    }

    const body: CreateProjectRequest = await request.json();

    // Sanitize input
    const sanitizedData = {
      name: sanitizeInput(body.name || ''),
      description: body.description ? sanitizeInput(body.description) : null,
    };

    // Validate project data
    const validation = validateProjectData(sanitizedData);
    if (!validation.valid) {
      return NextResponse.json(
        { 
          error: AIpmErrorType.VALIDATION_ERROR, 
          message: validation.errors.join(', ') 
        },
        { 
          status: 400,
          headers: getSecurityHeaders()
        }
      );
    }

    // Create project
    const { data: project, error } = await supabase
      .from('projects')
      .insert([
        {
          name: sanitizedData.name,
          description: sanitizedData.description,
          created_by: user.id,
        }
      ])
      .select()
      .single();

    if (error) {
      console.error('Database error:', error);
      return NextResponse.json(
        DatabaseErrors.QUERY_ERROR('프로젝트 생성'),
        { 
          status: 500,
          headers: getSecurityHeaders()
        }
      );
    }

    return NextResponse.json(
      { project }, 
      { 
        status: 201,
        headers: {
          ...getSecurityHeaders(),
          'X-RateLimit-Remaining': rateLimit.remaining.toString(),
          'X-RateLimit-Reset': new Date(rateLimit.resetTime).toISOString(),
        }
      }
    );
  } catch (error) {
    console.error('Unexpected error:', error);
    return NextResponse.json(
      { error: AIpmErrorType.INTERNAL_ERROR, message: '서버 내부 오류가 발생했습니다.' },
      { 
        status: 500,
        headers: getSecurityHeaders()
      }
    );
  }
}