import { cookies } from 'next/headers';
import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { isValidUUID, ValidationErrors, DatabaseErrors } from '@/lib/ai-pm/auth-middleware';

// Role type for validation
type ProjectRole = '콘텐츠기획' | '서비스기획' | 'UIUX기획' | '개발자';

function isValidRole(role: any): role is ProjectRole {
  return ['콘텐츠기획', '서비스기획', 'UIUX기획', '개발자'].includes(role);
}

// GET /api/ai-pm/projects/[projectId]/members
export async function GET(
  request: NextRequest,
  context: { params: { projectId: string } }
) {
  try {
    const cookieStore = cookies();
    const supabase = await createClient();
    const projectId = context.params.projectId;

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json({ error: 'UNAUTHORIZED', message: '인증이 필요합니다.' }, { status: 401 });
    }

    if (!isValidUUID(projectId)) {
      return NextResponse.json(ValidationErrors.INVALID_UUID('프로젝트 ID'), { status: 400 });
    }

    const { data: members, error } = await supabase
      .from('project_members_with_profiles')
      .select('*')
      .eq('project_id', projectId)
      .order('added_at', { ascending: true });

    if (error) {
      console.error('Database error in GET:', error);
      return NextResponse.json(DatabaseErrors.QUERY_ERROR('멤버 조회'), { status: 500 });
    }

    return NextResponse.json({ members });
  } catch (error) {
    console.error('Unexpected error in GET:', error);
    return NextResponse.json({ error: 'INTERNAL_ERROR', message: '서버 내부 오류가 발생했습니다.' }, { status: 500 });
  }
}

// POST /api/ai-pm/projects/[projectId]/members
export async function POST(
  request: NextRequest,
  context: { params: { projectId: string } }
) {
  try {
    const body = await request.json();
    const cookieStore = cookies();
    const supabase = await createClient();
    const projectId = context.params.projectId;

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
        return NextResponse.json({ error: 'UNAUTHORIZED', message: '인증이 필요합니다.' }, { status: 401 });
    }

    // Check if user is a member of the project
    const { data: member, error: memberError } = await supabase
      .from('project_members')
      .select('id')
      .eq('project_id', projectId)
      .eq('user_id', user.id)
      .maybeSingle();

    if (memberError || !member) {
      return NextResponse.json({ error: 'FORBIDDEN', message: '프로젝트 멤버만 다른 멤버를 추가할 수 있습니다.' }, { status: 403 });
    }
    
    if (!isValidUUID(projectId)) {
      return NextResponse.json(ValidationErrors.INVALID_UUID('프로젝트 ID'), { status: 400 });
    }
    if (!body.user_id || !isValidUUID(body.user_id)) {
      return NextResponse.json(ValidationErrors.REQUIRED_FIELD('사용자 ID'), { status: 400 });
    }
    if (!body.role || !isValidRole(body.role)) {
      return NextResponse.json(ValidationErrors.INVALID_ROLE, { status: 400 });
    }

    const { data: existingMember, error: memberCheckError } = await supabase
      .from('project_members')
      .select('id')
      .eq('project_id', projectId)
      .eq('user_id', body.user_id)
      .maybeSingle();

    if (memberCheckError) {
      console.error('Member check error:', memberCheckError);
      return NextResponse.json(DatabaseErrors.QUERY_ERROR('멤버 확인'), { status: 500 });
    }

    if (existingMember) {
      return NextResponse.json(DatabaseErrors.ALREADY_EXISTS('이미 추가된 멤버'), { status: 409 });
    }

    const { data: newMember, error: addError } = await supabase
      .from('project_members')
      .insert({
          project_id: projectId,
          user_id: body.user_id,
          role: body.role,
          added_by: user.id,
        })
      .select()
      .single();

    if (addError) {
      console.error('Add member error:', addError);
      return NextResponse.json(DatabaseErrors.QUERY_ERROR('멤버 추가'), { status: 500 });
    }

    const { data: memberWithProfile, error: memberProfileError } = await supabase
      .from('project_members_with_profiles')
      .select('*')
      .eq('id', newMember.id)
      .single();

    if (memberProfileError) {
        console.error('Fetch new member profile error:', memberProfileError);
        return NextResponse.json({ member: newMember }, { status: 201 });
    }

    return NextResponse.json({ member: memberWithProfile }, { status: 201 });
  } catch (error) {
    console.error('Unexpected error in POST:', error);
    return NextResponse.json({ error: 'INTERNAL_ERROR', message: '서버 내부 오류가 발생했습니다.' }, { status: 500 });
  }
}

// PUT /api/ai-pm/projects/[projectId]/members
export async function PUT(
  request: NextRequest,
  context: { params: { projectId: string } }
) {
  try {
    const body = await request.json();
    const cookieStore = cookies();
    const supabase = await createClient();
    const projectId = context.params.projectId;

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json({ error: 'UNAUTHORIZED', message: '인증이 필요합니다.' }, { status: 401 });
    }

    if (!isValidUUID(projectId)) {
        return NextResponse.json(ValidationErrors.INVALID_UUID('프로젝트 ID'), { status: 400 });
    }
    if (!body.memberId || !isValidUUID(body.memberId)) {
        return NextResponse.json(ValidationErrors.INVALID_UUID('멤버 ID'), { status: 400 });
    }
    if (!body.role || !isValidRole(body.role)) {
        return NextResponse.json(ValidationErrors.INVALID_ROLE, { status: 400 });
    }

    const { data: updatedMember, error: updateError } = await supabase
      .from('project_members')
      .update({ role: body.role })
      .eq('project_id', projectId)
      .eq('id', body.memberId)
      .select()
      .single();
    
    if (updateError) {
        console.error('Update member error:', updateError);
        if (updateError.code === 'PGRST116') {
            return NextResponse.json(DatabaseErrors.NOT_FOUND('멤버'), { status: 404});
        }
        return NextResponse.json(DatabaseErrors.QUERY_ERROR('멤버 역할 수정'), { status: 500 });
    }

    const { data: memberWithProfile, error: profileError } = await supabase
        .from('project_members_with_profiles')
        .select('*')
        .eq('id', updatedMember.id)
        .single();
    
    if (profileError) {
        console.error('Fetch updated member profile error:', profileError);
        return NextResponse.json({ member: updatedMember });
    }

    return NextResponse.json({ member: memberWithProfile });
  } catch (error) {
    console.error('Unexpected error in PUT:', error);
    return NextResponse.json({ error: 'INTERNAL_ERROR', message: '서버 내부 오류가 발생했습니다.' }, { status: 500 });
  }
}

// DELETE /api/ai-pm/projects/[projectId]/members
export async function DELETE(
  request: NextRequest,
  context: { params: { projectId: string } }
) {
  try {
    const { memberId } = await request.json();
    const cookieStore = cookies();
    const supabase = await createClient();
    const projectId = context.params.projectId;

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json({ error: 'UNAUTHORIZED', message: '인증이 필요합니다.' }, { status: 401 });
    }

    // Check if user is a member of the project
    const { data: member, error: memberError } = await supabase
      .from('project_members')
      .select('id')
      .eq('project_id', projectId)
      .eq('user_id', user.id)
      .maybeSingle();

    if (memberError || !member) {
      return NextResponse.json({ error: 'FORBIDDEN', message: '프로젝트 멤버만 다른 멤버를 제거할 수 있습니다.' }, { status: 403 });
    }
    
    if (!isValidUUID(projectId)) {
        return NextResponse.json(ValidationErrors.INVALID_UUID('프로젝트 ID'), { status: 400 });
    }
    if (!memberId || !isValidUUID(memberId)) {
        return NextResponse.json(ValidationErrors.INVALID_UUID('멤버 ID'), { status: 400 });
    }

    const { error: deleteError } = await supabase
      .from('project_members')
      .delete()
      .eq('project_id', projectId)
      .eq('id', memberId);

    if (deleteError) {
      console.error('Delete member error:', deleteError);
      return NextResponse.json(DatabaseErrors.QUERY_ERROR('멤버 제거'), { status: 500 });
    }

    return NextResponse.json({ message: '멤버가 성공적으로 제거되었습니다.' }, { status: 200 });
  } catch (error) {
    console.error('Unexpected error in DELETE:', error);
    return NextResponse.json({ error: 'INTERNAL_ERROR', message: '서버 내부 오류가 발생했습니다.' }, { status: 500 });
  }
}
